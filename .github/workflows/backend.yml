name: deploy backend

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: deploy backend
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: 3.8.5

      - name: Build
        run: mvn clean package --batch-mode
        working-directory: ecommerce-app-backend

      - name: Run tests
        run: mvn test
        working-directory: ecommerce-app-backend

      - name: Login to Azure
        if: github.event_name == 'workflow_dispatch'
        uses: azure/login@v2
        with: 
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Docker Hub
        if: github.event_name == 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build backend docker image
        if: github.event_name == 'workflow_dispatch'
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-app-backend:latest .
        working-directory: ecommerce-app-backend

      - name: push backend docker image
        if: github.event_name == 'workflow_dispatch'
        run: docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-app-backend:latest

      - name: Set Terraform Azure credentials
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV

      - name: Setup Terraform
        if: github.event_name == 'workflow_dispatch'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Initialize Terraform backend
        if: github.event_name == 'workflow_dispatch'
        run: terraform init
        working-directory: terraform

      - name: get k8s outputs (rg, cluster_name)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "RG=$(terraform output -raw rg)" >> $GITHUB_ENV
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
        working-directory: terraform

      - name: Set AKS Context
        if: github.event_name == 'workflow_dispatch'
        uses: azure/aks-set-context@v3
        with:
          cluster-name: $CLUSTER_NAME 
          resource-group: $RG

      - name: verify cluster access
        if: github.event_name == 'workflow_dispatch'
        run: kubectl get nodes

      - name: get ingress lb IP 
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "INGRESS_LB_IP=$(kubectl get svc -n ingress-nginx | awk '{ print $4 }' | head -n 2 | tail -n 1)" >> $GITHUB_ENV

      - name: create ConfigMap for backend from github secrets 
        if: github.event_name == 'workflow_dispatch'
        run: |
          kubectl create -n ecommerce-app configmap dbconfig \
            --from-literal=DB_NAME=${{ secrets.DB_NAME }} \
            --from-literal=DB_SERVER=${{ secrets.DB_SERVER }} \
            --from-literal=DB_TRUST_SERVER_CERTIFICATE=${{ secrets.DB_TRUST_SERVER_CERTIFICATE }} \
            --from-literal=CORS_ORIGIN=http://$INGRESS_LB_IP \
            --from-literal=DB_ENCRYPT=${{ secrets.DB_ENCRYPT }}

      - name: create k8s secret for backend
        if: github.event_name == 'workflow_dispatch'
        run: |
          kubectl create -n ecommerce-app secret generic my-secret \
            --from-literal=DB_USER=${{ secrets.SQL_ADMIN_LOGIN }} \
            --from-literal=DB_PASSWORD=${{ secrets.SQL_ADMIN_PASSWORD }}

      - name: Force rollout
        if: github.event_name == 'workflow_dispatch'
        run: kubectl rollout restart deployment/frontend -n default
        working-directory: k8s/frontend

