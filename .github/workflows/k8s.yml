name: set k8s

on:
  workflow_dispatch:
    
jobs:
  build:
    name: set cluster 
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with: 
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Terraform Azure credentials
        run: |
          echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Initialize Terraform backend
        run: terraform init
        working-directory: terraform

      - name: get k8s outputs (rg, cluster_name)
        run: |
          echo "RG=$(terraform output -raw rg)" >> $GITHUB_ENV
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
        working-directory: terraform

      - name: Set AKS Context
        uses: azure/aks-set-context@v3
        with:
          cluster-name: ${{ env.CLUSTER_NAME }} 
          resource-group: ${{ env.RG }}

      - name: verify cluster access
        run: kubectl get nodes

      - name: Install nginx Ingress
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm install ingress-nginx ingress-nginx/ingress-nginx --create-namespace --namespace ingress-nginx

      - name: Deploy kube-prometheus-stack
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace \
            --set prometheus.service.type=LoadBalancer

      - name: Expose Prometheus externally
        run: |
          kubectl wait --namespace monitoring --for=condition=available --timeout=300s svc/monitoring-kube-prometheus-prometheus
          echo "Prometheus LB IP:"
          kubectl get svc monitoring-kube-prometheus-prometheus -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}'

      - name: wait for ingress IP
        run: |
          echo "Waiting for Ingress LB IP..."
          for i in {1..30}; do
            IP=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$IP" ]; then
              echo "INGRESS_LB_IP=$IP" >> $GITHUB_ENV
              break
            fi
            sleep 10
          done

      - name: create namespace 
        run: |
          kubectl apply -f namespace.yml
        working-directory: k8s

      - name: deploy k8s backend
        run: |
          kubectl apply -f deployment.yml -f service.yml -f ingress.yml
        working-directory: k8s/backend

      - name: deploy k8s frontend
        run: |
          kubectl apply -f deployment.yml -f service.yml -f ingress.yml
        working-directory: k8s/frontend

      - name: get all 
        run: kubectl get all -n ecommerce-app

      - name: get ingress IP
        run: echo $INGRESS_LB_IP 